name: Android CI Build

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # unit-test:
  #   name: Perform unit testing
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout the code
  #       uses: actions/checkout@v4.2.2

  #     - name: Setup Java
  #       uses: actions/setup-java@v4.7.1
  #       with:
  #         distribution: 'temurin'
  #         java-version: 17

  #     - name: Setup Gradle
  #       uses: gradle/actions/setup-gradle@v4
  #       with:
  #         gradle-version: '8.9'

  #     - name: Run tests
  #       run: ./gradlew test check -x lint

  #     - name: Upload test report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: unit_test_report
  #         path: GPSTest/build/reports/test/testDebugUnitTest/

  # build:
  #   name: Build debug APK
  #   runs-on: ubuntu-latest
  #   needs: unit-test
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4.2.2

  #   - name: Setup Java
  #     uses: actions/setup-java@v4.7.1
  #     with:
  #       java-version: 17
  #       distribution: 'temurin'

  #   - name: Setup Android SDK
  #     uses: android-actions/setup-android@v3
  #     with:
  #       log-accepted-android-sdk-licenses: false

  #   - name: List packages
  #     run: sdkmanager --list

  #   - name: Build app
  #     run: ./gradlew assembleDebug -x lint --stacktrace

  #   - name: Print paths
  #     run: |
  #       ls -R GPSTest/build/outputs
  #       ls -R library/build/outputs
  #       ls -R wear/build/outputs

  #   - name: Upload APKs
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: apks
  #       path: |
  #         GPSTest/build/outputs/apk/
  #         wear/build/outputs/apk/
  
  instrumentation-test:
    # env:
    #   ANDROID_ARCH: x86_64
    #   ANDROID_TARGET: google_apis_playstore
    #   API_LEVEL: 33
    #   ANDROID_BUILD_TOOLS_VERSION: 33.0.3
    #   ANDROID_SDK_PACKAGES: system-images;android-33;google_apis_playstore;x86_64 platforms;android-33 build-tools;33.0.3 platform-tools emulator
    #   EMULATOR_TIMEOUT: 350
    #   EMULATOR_NAME: nexus
    # needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [33]
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Download APKs
        uses: actions/download-artifact@v4
        with:
          name: apks
          path: /tmp

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup Java
        uses: actions/setup-java@v4.7.1
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3
        
      # - name: Setup Android SDK
      #   uses: android-actions/setup-android@v3
      #   with:
      #     log-accepted-android-sdk-licenses: false
      #     packages: 'tools system-images;android-33;google_apis_playstore;x86_64 platforms;android-33 build-tools;33.0.3 platform-tools emulator'

      # - name: Build emulator
      #   run: |
      #       echo "no" | avdmanager --verbose create avd --force -n $EMULATOR_NAME --abi "${ANDROID_TARGET}/${ANDROID_ARCH}" -k "system-images;android-${API_LEVEL};${ANDROID_TARGET};${ANDROID_ARCH}"
      
      # - name: Launch emulator
      #   run: |
      #     adb devices | grep emulator | cut -f1 | xargs -I {} adb -s "{}" emu kill
      #     options="@${emulator_name} -no-window -no-snapshot -screen no-touch -noaudio -memory 2048 -no-boot-anim ${hw_accel_flag} -camera-back none"
      #     nohup emulator $options -gpu off &

      # - name: Run Gradle instrumentation test
      #   run: ./gradlew connectedCheck -x lint --stacktrace      

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-metrics
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
          arch: x86_64
          profile: Nexus 6

      - name: Run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-metrics
          disable-animations: true
          script: |
            adb wait-for-device
            ./gradlew connectedGoogleDebugAndroidTest -x lint --stacktrace
          arch: x86_64
          profile: Nexus 6